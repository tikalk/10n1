[{"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/_app.tsx":"1","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/api/[...alll].ts":"2","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/api/hello.js":"3","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/api/radar.ts":"4","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/[email].tsx":"5","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/add.tsx":"6","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/edit/[email].tsx":"7","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/index.tsx":"8","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/index.tsx":"9","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/me.tsx":"10","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step2.tsx":"11","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step3.tsx":"12","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step4.tsx":"13","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step5.tsx":"14","/Users/ranwahle/dev/1on1-nx/packages/ui/components/AvailabilitySelector.tsx":"15","/Users/ranwahle/dev/1on1-nx/packages/ui/components/ExpertCard.tsx":"16","/Users/ranwahle/dev/1on1-nx/packages/ui/components/Header.tsx":"17"},{"size":1438,"mtime":1683379274213,"results":"18","hashOfConfig":"19"},{"size":420,"mtime":1683211755356,"results":"20","hashOfConfig":"19"},{"size":159,"mtime":1683211755356,"results":"21","hashOfConfig":"19"},{"size":428,"mtime":1683211755356,"results":"22","hashOfConfig":"19"},{"size":729,"mtime":1683378396313,"results":"23","hashOfConfig":"19"},{"size":10171,"mtime":1683378993969,"results":"24","hashOfConfig":"19"},{"size":113,"mtime":1683211755357,"results":"25","hashOfConfig":"19"},{"size":3492,"mtime":1683378396297,"results":"26","hashOfConfig":"19"},{"size":2012,"mtime":1683378963026,"results":"27","hashOfConfig":"19"},{"size":689,"mtime":1683378970708,"results":"28","hashOfConfig":"19"},{"size":2295,"mtime":1683379013443,"results":"29","hashOfConfig":"19"},{"size":4565,"mtime":1683379032304,"results":"30","hashOfConfig":"19"},{"size":2813,"mtime":1683379044992,"results":"31","hashOfConfig":"19"},{"size":2661,"mtime":1683379053907,"results":"32","hashOfConfig":"19"},{"size":4045,"mtime":1683211755350,"results":"33","hashOfConfig":"19"},{"size":3517,"mtime":1683378924462,"results":"34","hashOfConfig":"19"},{"size":2548,"mtime":1683378952367,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38"},"s4mbaa",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/_app.tsx",["74"],"/* eslint-disable react/jsx-props-no-spreading */\nimport { AppProps } from 'next/app';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { ApolloProvider } from '@apollo/client';\nimport * as Sentry from '@sentry/react';\nimport { Integrations } from '@sentry/tracing';\nimport { useEffect } from 'react';\nimport client from '../apollo-client';\nimport { AuthProvider } from '../hooks/useAuth';\nimport '../assets/css/now-ui-kit.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nSentry.init({\n  dsn:\n    'https://baf201991dd4488282eaa3c505cfa1e2@o575983.ingest.sentry.io/5730638',\n  integrations: [new Integrations.BrowserTracing()],\n  tracesSampleRate: 1.0,\n});\n\nexport default function App({ Component, pageProps }: AppProps) {\n  useEffect(() => {\n    const protocol =\n      typeof window !== 'undefined' && window.location.protocol\n        ? window.location.protocol\n        : '';\n    const hostname =\n      typeof window !== 'undefined' && window.location.hostname\n        ? window.location.hostname\n        : '';\n    if (\n      process.env.NODE_ENV === 'production' &&\n      (protocol !== 'https:' || hostname !== '10n1.tikalk.dev')\n    ) {\n      window.location.assign(`https://10n1.tikalk.dev`);\n    }\n  }, []);\n  return (\n    <ApolloProvider client={client}>\n      <AuthProvider>\n        <Component {...pageProps} />\n      </AuthProvider>\n    </ApolloProvider>\n  );\n}\n","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/api/[...alll].ts",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/api/hello.js",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/api/radar.ts",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/[email].tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/add.tsx",["75","76","77","78"],"/* eslint-disable react/jsx-props-no-spreading */\nimport { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Form,\n  FormFeedback,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap';\nimport { useFormik } from 'formik';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport _ from 'lodash';\nimport * as Yup from 'yup';\nimport { useRouter } from 'next/router';\nimport AvailabilitySelector from '../../components/AvailabilitySelector';\nimport Header from '../../components/Header';\nimport { CREATE_EXPERT, UPDATE_EXPERT } from '../../graphql/mutations';\nimport useAuth from '../../hooks/useAuth';\nimport { GET_EXPERT_BY_EMAIL } from '../../graphql/queries';\nimport radar from '../../data/radar.json';\n\nconst RegistrationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'To short!')\n    .max(50, 'To long!')\n    .required('Required!'),\n  phone: Yup.string()\n    .min(7, 'To short!')\n    .max(15, 'To long!')\n    .required('Required!'),\n  email: Yup.string().email('Invalid email').required('Required!'),\n  bio: Yup.string(),\n  expertise: Yup.array().min(1, 'Minimum 1 expertise').required('Required!'),\n  availability: Yup.array()\n    .of(\n      Yup.object({\n        day: Yup.string(),\n        startTime: Yup.string(),\n        endTime: Yup.string(),\n        key: Yup.string(),\n      }),\n    )\n    .min(1, 'Minimum 1 Availability')\n    .required('Required!'),\n});\n\nconst Add = () => {\n  const [options, setOptions] = useState([]);\n  const [createExpert] = useMutation(CREATE_EXPERT);\n  const [updateExpert] = useMutation(UPDATE_EXPERT);\n  const { userData } = useAuth();\n  const router = useRouter();\n  const { email } = router.query;\n  const [getExpertData, { data }] = useLazyQuery(GET_EXPERT_BY_EMAIL, {\n    variables: { email },\n  });\n\n  const expertData = data?.expert || {};\n\n  const formik = useFormik({\n    initialValues: {\n      name: userData?.name || expertData?.name || '',\n      phone: userData?.phone || expertData?.phone || '',\n      email: userData?.email || expertData?.email || '',\n      bio: expertData?.bio || '',\n      image: userData?.image || expertData?.image || '',\n      expertise: expertData?.expertise || [],\n      availability: expertData?.availability || [],\n    },\n    enableReinitialize: true,\n    validationSchema: RegistrationSchema,\n    onSubmit: (values) => {\n      if (email) {\n        updateExpert({\n          variables: {\n            input: {\n              ...values,\n              expertise: [\n                ...values.expertise.map((theme) =>\n                  typeof theme === 'object'\n                    ? _.pick(theme, ['name'])\n                    : { name: theme },\n                ),\n              ],\n            },\n          },\n        }).then(() => {\n          router.push(`/experts/${email}`);\n        });\n      } else {\n        createExpert({\n          variables: {\n            input: {\n              ...values,\n              expertise: [\n                ...values.expertise.map((theme) =>\n                  typeof theme === 'object'\n                    ? _.pick(theme, ['name'])\n                    : { name: theme },\n                ),\n              ],\n            },\n          },\n        }).then(() => {\n          router.push('/');\n        });\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (email) {\n      getExpertData();\n    }\n  }, [email]);\n\n  useEffect(() => {\n    const techs = [];\n    radar.blips.forEach((blip) => {\n      techs.push(blip.name);\n    });\n    setOptions(_.uniq(techs));\n  }, []);\n\n  return (\n    <>\n      <Header title=\"1 On 1 - Registration page\" />\n      <Container fluid>\n        <Row className=\"mt-4\">\n          <Col md={3} />\n          <Col md={6}>\n            <Card className=\"p-3\">\n              <CardBody>\n                <Form>\n                  <Row>\n                    <Col md={6} sm={12}>\n                      <FormGroup className=\"d-flex flex-column\">\n                        <Label for=\"name\">Name:</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"name\"\n                          id=\"name\"\n                          value={formik?.values?.name}\n                          onChange={formik.handleChange}\n                          placeholder=\"Enter your name...\"\n                          {...formik.getFieldProps('name')}\n                        />\n                        {formik.errors?.name && formik.touched.name && (\n                          <FormFeedback>{formik.errors?.name as string}</FormFeedback>\n                        )}\n                      </FormGroup>\n                    </Col>\n                    <Col md={6} sm={12}>\n                      <FormGroup className=\"d-flex flex-column\">\n                        <Label for=\"phone\">Phone #:</Label>\n                        <Input\n                          type=\"tel\"\n                          name=\"phone\"\n                          id=\"phone\"\n                          value={formik?.values?.phone}\n                          onChange={formik.handleChange}\n                          placeholder=\"Enter your phone #...\"\n                          {...formik.getFieldProps('phone')}\n                        />\n                        {formik.errors?.phone && formik.touched.phone && (\n                          <FormFeedback>{formik.errors?.phone as string}</FormFeedback>\n                        )}\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={12}>\n                      <FormGroup className=\"d-flex flex-column\">\n                        <Label for=\"email\">Email:</Label>\n                        <Input\n                          type=\"email\"\n                          name=\"email\"\n                          id=\"email\"\n                          value={formik?.values?.email}\n                          onChange={formik.handleChange}\n                          placeholder=\"Enter your email...\"\n                          {...formik.getFieldProps('email')}\n                        />\n                        {formik.errors?.email && formik.touched.email && (\n                          <FormFeedback>{formik.errors?.email as string}</FormFeedback>\n                        )}\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={12}>\n                      <FormGroup className=\"d-flex flex-column\">\n                        <Label for=\"bio\">Bio:</Label>\n                        <Input\n                          type=\"textarea\"\n                          name=\"bio\"\n                          id=\"bio\"\n                          value={formik?.values?.bio}\n                          onChange={formik.handleChange}\n                          {...formik.getFieldProps('bio')}\n                        />\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={12}>\n                      <FormGroup className=\"d-flex flex-column\">\n                        <Label for=\"expertise\">Expertise:</Label>\n                        <Typeahead\n                          id=\"expertise\"\n                          name=\"expertise\"\n                          labelKey=\"name\"\n                          size=\"large\"\n                          multiple\n                          allowNew\n                          onChange={(value) => {\n                            formik.setFieldValue('expertise', value);\n                          }}\n                          options={options}\n                          placeholder=\"Choose several expertise...\"\n                          selected={\n                            formik?.values?.expertise ??\n                            [].map((expertise) => expertise.name)\n                          }\n                          className={\n                            formik.errors?.expertise && formik.touched.expertise\n                              ? 'border-danger border rounded'\n                              : ''\n                          }\n                        />\n                        {formik.errors?.expertise && (\n                          <div className=\"text-danger\">\n                            {formik.errors?.expertise as string}\n                          </div>\n                        )}\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={12}>\n                      <FormGroup\n                        className={\n                          formik.errors?.availability &&\n                          formik.touched.availability\n                            ? 'border-danger border rounded d-flex flex-column'\n                            : 'd-flex flex-column'\n                        }\n                      >\n                        <Label for=\"availability\">Availability:</Label>\n                        <AvailabilitySelector\n                          values={formik.values?.availability}\n                          onChange={(value) => {\n                            formik.setFieldValue('availability', value);\n                          }}\n                        />\n                      </FormGroup>\n                      {formik.errors?.availability && (\n                        <div className=\"text-danger\">\n                          {formik.errors?.availability as string }\n                        </div>\n                      )}\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={12} className=\"d-flex justify-content-end \">\n                      <Button\n                        color=\"warning\"\n                        onClick={formik.submitForm}\n                        disabled={!formik.isValid}\n                      >\n                        Edit\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Add;\n","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/edit/[email].tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/experts/index.tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/index.tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/me.tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step2.tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step3.tsx",["79"],"/* eslint-disable react/no-unescaped-entities */\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Container,\n  Row,\n} from 'reactstrap';\nimport { useRouter } from 'next/router';\nimport { useFormik } from 'formik';\nimport _ from 'lodash';\nimport * as Yup from 'yup';\nimport { useMutation } from '@apollo/client';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { useCallback, useEffect, useState } from 'react';\nimport { TagCloud } from 'react-tagcloud';\nimport Header from '../../components/Header';\nimport { UPDATE_EXPERT } from '../../graphql/mutations';\nimport useAuth from '../../hooks/useAuth';\nimport radar from '../../data/radar.json';\n\nconst RegistrationSchema = Yup.object().shape({\n  expertise: Yup.array().min(1).required(),\n});\n\nconst Step3 = () => {\n  const { userData, refetch } = useAuth();\n  const router: any = useRouter();\n  const [options, setOptions] = useState([]);\n  const [updateExpert] = useMutation(UPDATE_EXPERT);\n\n  const formik = useFormik({\n    initialValues: {\n      expertise: userData?.expertise ?? [],\n    },\n    enableReinitialize: true,\n    validationSchema: RegistrationSchema,\n    onSubmit: () => {},\n  });\n\n  const submit = useCallback(async () => {\n    await updateExpert({\n      variables: {\n        input: {\n          email: userData?.email,\n          expertise: [\n            ...formik.values.expertise.map((theme) =>\n              typeof theme === 'object'\n                ? _.pick(theme, ['name'])\n                : { name: theme },\n            ),\n          ],\n        },\n      },\n    });\n    await refetch();\n    router.push('/registration/step4');\n  }, [formik.values, userData]);\n\n  useEffect(() => {\n    const techs = [];\n    radar.blips.forEach((blip) => {\n      techs.push(blip.name);\n    });\n    setOptions(_.uniq(techs));\n  }, []);\n\n  return (\n    <>\n      <Header title=\"Tikal 10n1 step3\" />\n      <Container>\n        <Row>\n          <Col md={8}>\n            <Card className=\"p-4\">\n              <CardHeader className=\"pt-2 px-3\">\n                <h2>Registration Step III - Choose your expertise</h2>\n              </CardHeader>\n              <CardBody>\n                <p>\n                  Please select from the list of expertise the technologies you\n                  fell comfortable to help others with. If one of the tech's is\n                  missing type the name of the tech and click \"New selection\"\n                </p>\n                <Typeahead\n                  id=\"expertise\"\n                  name=\"expertise\"\n                  labelKey=\"name\"\n                  size=\"large\"\n                  multiple\n                  allowNew\n                  onChange={(value) => {\n                    formik.setFieldValue('expertise', value);\n                  }}\n                  options={options}\n                  placeholder=\"Choose expertise, You can choose several expertise...\"\n                  selected={\n                    formik?.values?.expertise ??\n                    [].map((expertise) => expertise.name)\n                  }\n                  className={\n                    formik.errors?.expertise && formik.touched.expertise\n                      ? 'border-danger border rounded'\n                      : ''\n                  }\n                />\n                <br />\n                {formik?.values?.expertise?.length === 0 && (\n                  <span className=\"text-danger\">\n                    Please select at least one expertise in order to proceed.\n                  </span>\n                )}\n                <br />\n                <Button\n                  size=\"lg\"\n                  color=\"primary\"\n                  disabled={formik?.values?.expertise?.length === 0}\n                  onClick={submit}\n                >\n                  Next Step\n                </Button>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md={4} className=\"text-center\">\n            <img\n              src=\"/superHero3.png\"\n              alt=\"Be a 10n1 Super hero\"\n              style={{ maxWidth: '75%' }}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <TagCloud\n              minSize={14}\n              maxSize={60}\n              tags={[]}\n              onClick={\n                (tag) => alert(tag)\n                // setSelectedFilters({\n                //   ...selectedFilters,\n                //   themes: tag.value,\n                // })\n              }\n              shuffle\n            />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Step3;\n","/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step4.tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/pages/registration/step5.tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/components/AvailabilitySelector.tsx",[],"/Users/ranwahle/dev/1on1-nx/packages/ui/components/ExpertCard.tsx",["80"],"/* eslint-disable import/no-extraneous-dependencies */\nimport { Badge, Button, Card, CardBody } from 'reactstrap';\nimport { sign } from 'jsonwebtoken';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport _ from 'lodash';\nimport {useAuth} from '../hooks/useAuth';\nimport { getNext3AppointmentOptions } from '../dateHelper';\n\nconst ExpertCard = ({ expert, me }: any) => {\n  const { userData } = useAuth();\n  return (\n    <Card>\n      <CardBody>\n        <div className=\"d-flex align-items-center mb-2\">\n          {expert?.image && (\n            <img\n              src={expert?.image}\n              alt={expert?.name}\n              className=\"float-right mr-3 rounded-circle\"\n            />\n          )}\n          <div>\n            <h3 className=\"m-0 p-0\">{expert?.name}</h3>\n            <h5 className=\"m-0 p-0 font-weight-bold\">{expert?.email}</h5>\n          </div>\n        </div>\n        <div className=\"mb-4\">\n          <strong className=\"mr-3\">Bio:</strong> {expert?.bio}\n        </div>\n        <div className=\"d-flex align-items-start\">\n          <strong className=\"mr-3\">Expertise:</strong>{' '}\n          <div className=\"w-100\">\n            {expert?.expertise?.map((exp) => (\n              <Badge\n                color=\"warning\"\n                pill\n                className=\"mr-2\"\n                key={`expertise-${_.snakeCase(exp.name)}-${expert.id}`}\n              >\n                {exp.name}\n              </Badge>\n            ))}\n          </div>\n        </div>\n        <div className=\"d-flex align-items-start mt-2\">\n          <strong className=\"mr-3\">Availability:</strong>{' '}\n          <div className=\"w-100\">\n            {expert?.availability?.map((exp) => (\n              <Badge\n                color=\"success\"\n                pill\n                className=\"mr-2 text-black\"\n                key={`availability-${exp.key}-${expert.id}`}\n              >{`${exp.day} ${exp.startTime}-${exp.endTime}`}</Badge>\n            ))}\n          </div>\n        </div>\n        <hr />\n        {me && (\n          <Link href={`/experts/edit/${expert.email}`}>\n            <Button color=\"warning\">Edit your profile.</Button>\n          </Link>\n        )}\n        {!me && (\n          <div className=\"d-flex align-items-center\">\n            <span className=\"mr-2\">📅: </span>\n            {getNext3AppointmentOptions(expert?.availability).map((slot) => {\n              // todo: remove this duplication\n              const baseUrl =\n                process.env.NODE_ENV === 'production'\n                  ? 'https://10n1.tikalk.dev'\n                  : 'http://localhost:4000';\n\n              const meeting = {\n                time: slot,\n                expert,\n                userName: userData.name,\n                expertise: 'experts list',\n              };\n              const data = sign(meeting, `10n1Secret-${moment().isoWeekday()}`);\n              const url = `${baseUrl}/ds/meeting/?data=${data}`;\n              return (\n                <Button\n                  color=\"success\"\n                  className=\"mr-2 my-2 text-black font-weight-bold\"\n                  size=\"sm\"\n                  onClick={() => window.open(url)}\n                  key={`availability-btn-${slot}-${expert.id}`}\n                >\n                  <span style={{ fontSize: 9 }}>\n                    {slot.format('dddd - DD/MM/YY HH:mm')}\n                  </span>\n                </Button>\n              );\n            })}\n          </div>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ExpertCard;\n","/Users/ranwahle/dev/1on1-nx/packages/ui/components/Header.tsx",[],{"ruleId":"81","severity":1,"message":"82","line":15,"column":7,"nodeType":null,"messageId":"83","endLine":16,"endColumn":4,"fix":"84"},{"ruleId":"81","severity":1,"message":"85","line":156,"column":41,"nodeType":null,"messageId":"86","endLine":156,"endColumn":72,"fix":"87"},{"ruleId":"81","severity":1,"message":"88","line":173,"column":41,"nodeType":null,"messageId":"86","endLine":173,"endColumn":73,"fix":"89"},{"ruleId":"81","severity":1,"message":"90","line":192,"column":41,"nodeType":null,"messageId":"86","endLine":192,"endColumn":73,"fix":"91"},{"ruleId":"81","severity":1,"message":"92","line":266,"column":65,"nodeType":null,"messageId":"83","endLine":266,"endColumn":66,"fix":"93"},{"ruleId":"94","severity":1,"message":"95","line":141,"column":26,"nodeType":"96","messageId":"97","endLine":141,"endColumn":36},{"ruleId":"81","severity":1,"message":"98","line":7,"column":9,"nodeType":null,"messageId":"86","endLine":7,"endColumn":16,"fix":"99"},"prettier/prettier","Delete `⏎···`","delete",{"range":"100","text":"101"},"Replace `{formik.errors?.name·as·string}` with `⏎····························{formik.errors?.name·as·string}⏎··························`","replace",{"range":"102","text":"103"},"Replace `{formik.errors?.phone·as·string}` with `⏎····························{formik.errors?.phone·as·string}⏎··························`",{"range":"104","text":"105"},"Replace `{formik.errors?.email·as·string}` with `⏎····························{formik.errors?.email·as·string}⏎··························`",{"range":"106","text":"107"},"Delete `·`",{"range":"108","text":"101"},"no-alert","Unexpected alert.","CallExpression","unexpected","Replace `useAuth` with `·useAuth·`",{"range":"109","text":"110"},[561,565],"",[4548,4579],"\n                            {formik.errors?.name as string}\n                          ",[5372,5404],"\n                            {formik.errors?.phone as string}\n                          ",[6237,6269],"\n                            {formik.errors?.email as string}\n                          ",[9494,9495],[243,250]," useAuth "]